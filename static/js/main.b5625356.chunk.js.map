{"version":3,"sources":["logo.svg","components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","onClick","value","Board","i","this","squares","renderSquare","Component","Game","state","xIsNext","stepNumber","history","Array","fill","step","setState","slice","length","calculateWinner","concat","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b5625356.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nexport default function Square(props) {\r\n    return (\r\n<button className=\"square\" onClick={props.onClick}>\r\n    {props.value}\r\n</button>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport Square from './Square'\r\n\r\nexport default class Board extends Component {\r\n    renderSquare(i){\r\n        //square component will be returned every time the renderSquare function is called\r\n        //and the value comes from the parent component (board)\r\n        //onclick comes from parent component and responds from onclick and returns param 'i'\r\n        return <Square value={this.props.squares[i]}\r\n        onClick={()=>this.props.onClick(i)}/>\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"border-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"border-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"border-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Board from './Board';\r\n\r\nexport default class Game extends Component {\r\n    //const accepts props and super function is called inside each component within\r\n    constructor(props){\r\n        super(props);\r\n        //this initializes state\r\n        this.state = {\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            //History of the state and action ehcih at begining all of them are null\r\n            history: [\r\n                {squares: Array(9).fill(null)}\r\n            ]\r\n        }\r\n    }\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step%2===0)\r\n        })\r\n    }\r\n\r\n    //we are designing the core function of click on each saure \r\n    //first create a copy of history and define the current history which is the last item in history\r\n    //second determine that who is the player; player O or X\r\n    //then go to next player\r\n    handleClick(i){\r\n        const history = this.state.history.slice(0,this.state.stepNumber+1);\r\n        const current = history[history.length-1];\r\n        const squares = current.squares.slice();\r\n        //check if we find the the winner there is no reason to continiue the games\r\n        //also we have to check the double click on a square\r\n        const winner = calculateWinner(squares);\r\n        if(winner || squares[i] ){\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext?'X':'O';\r\n        this.setState({\r\n            history: history.concat({\r\n                squares: squares\r\n            }),\r\n            xIsNext: !this.state.xIsNext,\r\n            stepNumber: history.length\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step,move)=>{\r\n            const desc = move?'Go to #' + move:'Start Game';\r\n            return(\r\n                \r\n                <li key={move}>\r\n                    <button onClick={()=>{this.jumpTo(move)}}>\r\n                        {desc}\r\n                    </button>\r\n                </li>\r\n               \r\n            )\r\n           \r\n        });\r\n        let status;\r\n        if(winner){\r\n            status = 'Winner is ' + winner;\r\n        } else{\r\n            if (this.state.stepNumber > 8){\r\n                status = 'NO WINNER! try it again....'    \r\n            }else {\r\n                status = 'Next player is ' + (this.state.xIsNext?'x':'o');\r\n            }\r\n        } \r\n        \r\n\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board onClick={(i)=>this.handleClick(i)}\r\n                    squares={current.squares} />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ul>{moves}</ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//is a function to return the winner and define who is the winner\r\n//define the state that you can be a winner\r\nfunction calculateWinner(squares){\r\n    const lines = [\r\n        [0,1,2],\r\n        [3,4,5],\r\n        [6,7,8],\r\n        [0,3,6],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [0,4,8],\r\n        [2,4,6]\r\n    ];\r\n    for(let i=0;i<lines.length;i++){\r\n        const [a,b,c] = lines[i];\r\n        if(squares[a] && squares[a] === squares[b] && squares[b] === squares[c])\r\n            return squares[a];\r\n    }\r\n\r\n    return null;\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from '../src/components/Game'\n\nfunction App() {\n  return (\n    <Game />\n\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}